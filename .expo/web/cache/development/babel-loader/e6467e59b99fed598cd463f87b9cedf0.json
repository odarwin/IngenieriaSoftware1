{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient } from \"@apollo/client\";\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar httpLink = createHttpLink({\n  uri: Platform.OS === 'ios' ? 'http://localhost:4000/' : 'http://192.168.0.8:4000/'\n});\nvar authLink = setContext(function _callee(_, _ref) {\n  var headers, token;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          headers = _ref.headers;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('token'));\n\n        case 3:\n          token = _context.sent;\n          return _context.abrupt(\"return\", {\n            headers: _objectSpread(_objectSpread({}, headers), {}, {\n              authorization: token ? \"Bearer \" + token : ''\n            })\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nvar client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: authLink.concat(httpLink)\n});\nexport default client;","map":{"version":3,"sources":["C:/Users/Harold/Downloads/ProyectoIngS/IngenieriaSoftware1/config/apollo.js"],"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","AsyncStorage","httpLink","uri","Platform","OS","authLink","_","headers","getItem","token","authorization","client","cache","link","concat"],"mappings":";;;;;;;AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AAGA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,IAAMC,QAAQ,GAAGH,cAAc,CAAC;AAC9BI,EAAAA,GAAG,EAAEC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB,wBAAxB,GAAmD;AAD1B,CAAD,CAA/B;AAIA,IAAMC,QAAQ,GAAGN,UAAU,CAAE,iBAAOO,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYC,UAAAA,OAAZ,QAAYA,OAAZ;AAAA;AAAA,2CAEPP,YAAY,CAACQ,OAAb,CAAqB,OAArB,CAFO;;AAAA;AAErBC,UAAAA,KAFqB;AAAA,2CAGpB;AACLF,YAAAA,OAAO,kCACFA,OADE;AAELG,cAAAA,aAAa,EAAED,KAAK,eAAaA,KAAb,GAAuB;AAFtC;AADF,WAHoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAF,CAA3B;AAcA,IAAME,MAAM,GAAG,IAAIf,YAAJ,CAAiB;AAC9BgB,EAAAA,KAAK,EAAE,IAAIf,aAAJ,EADuB;AAE9BgB,EAAAA,IAAI,EAAER,QAAQ,CAACS,MAAT,CAAgBb,QAAhB;AAFwB,CAAjB,CAAf;AAMA,eAAeU,MAAf","sourcesContent":["import { ApolloClient } from \"@apollo/client\";\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { createHttpLink } from 'apollo-link-http';\r\nimport { setContext } from 'apollo-link-context';\r\n\r\nimport { Platform } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: Platform.OS === 'ios' ? 'http://localhost:4000/' : 'http://192.168.0.8:4000/'\r\n});\r\n\r\nconst authLink = setContext( async (_, { headers })  => {\r\n  //Leer el token\r\n  const token = await AsyncStorage.getItem('token');\r\n  return {\r\n    headers: {\r\n      ...headers, \r\n      authorization: token ? `Bearer ${token}` : ''\r\n    }\r\n  }\r\n\r\n})\r\n\r\n\r\n\r\nconst client = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  link: authLink.concat(httpLink)\r\n});\r\n\r\n\r\nexport default client;"]},"metadata":{},"sourceType":"module"}